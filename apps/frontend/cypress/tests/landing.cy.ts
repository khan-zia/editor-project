import { api } from '../schema';

describe('Rendering the landing page and being able to create a new note.', () => {
  it('Can render the landing page properly.', () => {
    // Visit the main page.
    cy.visit('/');

    // The "Notes" word should be there in the top left corner.
    cy.getByDataAttribute('notes-logo').canBeSeen();

    // The button for adding a new note should be there.
    cy.getByDataAttribute('add-note-button').canBeSeen();
  });

  it('Can create a new note.', () => {
    // This is a patch for the snapshot package. Has nothing to do with the test.
    cy.fixCypressSpec();

    // Visit the main page.
    cy.visit('/');

    // Spy on the new note creation request.
    cy.intercept(
      {
        method: 'POST',
        url: 'http://localhost:3001/api/notes',
      },

      /**
       * Make sure correct payload was sent to the backend for creating a new note.
       * This is made possible with JSON schemas. You define a schema for what you expect
       * the payload should be generated by the frontend.
       */
      (request) => api.assertSchema('CreateNewNoteRequest', '1.0.0')(request.body),
    ).as('createNoteRequest');

    // Click the "add note" button.
    cy.getByDataAttribute('add-note-button').click();

    // The new note dialog should be visible.
    cy.getByDataAttribute('new-note-dialog').canBeSeen();

    // There should be a cancel button on the dialog that also closes it.
    cy.getByDataAttribute('close-dialog-button').canBeSeen().click();
    cy.getByDataAttribute('new-note-dialog').should('not.exist');

    // Bring the dialog back.
    cy.getByDataAttribute('add-note-button').click();

    // The input field for the entering a title should be visible.
    cy.getByDataAttribute('new-note-input').canBeSeen();

    // Clicking the create button without entering a title triggers an error message.
    cy.getByDataAttribute('create-note-button').canBeSeen().click();
    cy.getByDataAttribute('note-error-message')
      .canBeSeen()
      .then((element) => {
        expect(element.text()).to.be.eq('Choose a title for your note.');
      });

    // Enter a title for the note.
    cy.getByDataAttribute('new-note-input').type('Awesome Note');

    // Click the create note button again.
    cy.getByDataAttribute('create-note-button').click();

    // Wait for the new note creation request to complete and then run assertions
    // against the response.
    cy.wait('@createNoteRequest')
      .its('response')
      .then(({ body, statusCode }) => {
        expect(statusCode).to.eq(200);

        // Asserts json schema structure. Response body must be the same
        // as the expected json schema.
        api.assertSchema('CreateNewNoteSuccess', '1.0.0')(body);

        // Sanitize response body. Because volatile values can not be deterministically
        // tested. e.g. Note's ID is random and will be different every time. We only
        // validate it against a defined regex format and then we substitute it by an example
        // value. The example value can then be deterministically checked against a stored snapshot.
        const res = api.sanitize('CreateNewNoteSuccess', '1.0.0')(body);

        // Check that the response body matches a store snapshot. If no snapshot exist for this
        // request, it will be created and stored as the first time.
        cy.wrap(res).toMatchSnapshot();
      });

    // The user should land on the new note's page.
    const base = Cypress.config().baseUrl + '/notes/';
    cy.url()
      .should('include', base)
      .then((url) => {
        // New note's ID is expected to be a 20 chars alphanumeric string.
        expect(new RegExp('^[a-zA-Z0-9]{20}$').test(url.replace(base, ''))).to.be.true;
      });
  });
});
